
ubuntu 24.04, t2.medium server

eyJ2ZXIiOiIyIiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYiLCJraWQiOiJlTEE5VmdmN3JPOTZpeWtISmVlVUd4SzhMd0ZHX2RCN1VZWkJUdXhJMURzIn0.eyJzdWIiOiJqZmFjQDAxamQ5Mnc2YjM4N21qMHp6MmgwZHcwNjF0L3VzZXJzL2Rldm9wcy1qZnJvZyIsInNjcCI6ImFwcGxpZWQtcGVybWlzc2lvbnMvYWRtaW4iLCJhdWQiOiIqQCoiLCJpc3MiOiJqZmZlQDAxamQ5Mnc2YjM4N21qMHp6MmgwZHcwNjF0IiwiaWF0IjoxNzMyNTI3NDg3LCJqdGkiOiJjZjJiODI5YS0zNTEzLTQ4N2ItOTE5NC1mNjJhMTcxOTI2OTUiLCJ0aWQiOiJhMGpuMnNpOHRhdG56In0.kHmMlRq6dqKts9SQWPHppaJKxt71aYrSyvySmvBfZJ5eu_92bYQ9FP6IKGatJpAAqAdXwyEymtn5Q1eQqk8evrjpoDe4tyxBYFaKscODUEiFVfq6BOaOH0PGOST5gmaDbuy3sbDqrdFm8VjBWJpeUWBOOLXUur468ZZfO8sVwUPK0MVNF2jPmF88XjmbJQA978B62UuJ31HEp_9nhLcm9ot2uR2UdHNpurfloj8a2sCh0iV_GW338_2v4Z66MTEd0XWQU64cXPqJrCJ0Y8CcVArXHUWwfrsXR2qH77bmLAmYmarkjHgvWx3onGhl4NMU10gz14Fp47Xz3I8RT7_WkA




sudo apt update
sudo apt install fontconfig openjdk-17-jre
java -version


sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian/jenkins.io-2023.key
echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc]" \
  https://pkg.jenkins.io/debian binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update
sudo apt-get install jenkins

curl -fsSL https://get.docker.com -o get-docker.sh
 sudo sh ./get-docker.sh

-------------------------------------------------------------------

jfrag 
  create repository for maven and docker.
  create token

jenkins
  install plugin, artifactory, docker-pipeline, pipeline view.
  credential for jfrag
  tool maven_Home

--------------------------------------------------------------------



def registry = 'trialp6o7re.jfrog.io'
def imageName = 'devops-docker-docker-local/addressbook'
def version = '2.1.2'

pipeline {
    agent any
    
     options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '30', numToKeepStr: '2')
    }

    
    tools{
        maven 'Maven_Home'
    }
    
    environment {
        BUILD_VERSION = '10'
    }

    stages {
        
        stage('Git-Checkout') {
            steps {
                checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/promo286/addressbook.git']])
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }
        
         stage('Build') {
            steps {
                sh 'mvn package'
            }
        }
        
        stage('War Publish') {
            
            steps {
                script {
                    echo '<--------------- War Publish Started --------------->'

                    def server = Artifactory.newServer(
                    url: "https://${registry}/artifactory",
                    credentialsId: "artifact-cred"
                    )
                    
                    def properties = "build.id=${env.BUILD_ID}";

                    def uploadSpec = """{
                        "files": [
                            {
                                "pattern": "target/*.war",
                                "target": "devops-suryateck-libs-release-local/",
                                "props": "${properties}",
                                 "flat": true
                            }
                        ]
                    }"""
                    
                    def buildInfo = server.upload(uploadSpec)
                    buildInfo.env.collect()
                    server.publishBuildInfo(buildInfo)

                    echo '<--------------- War Publish Ended --------------->'
                }
            }
        }
        stage('Docker Build') {
            
            steps {
                script {
                    app = docker.build("${registry}/${imageName}")
                }
            }
        }
        
        stage("Docker Publish") {
            steps {
                
                script {
                    echo '<--------------- Docker Publisah Started --------------->'
                    docker.withRegistry("https://${registry}", 'artifact-cred') {
                        app.push()
                    }
                    echo '<--------------- Docker Publish Ended --------------->'
                }
            }
        }
     }
    }

