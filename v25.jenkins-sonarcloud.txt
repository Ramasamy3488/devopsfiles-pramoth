1.

linux
t2.medium

systemctl edit jenkins --full
   Environment = "8080"

plugins - 
credentials  - sonar scanner,quality gate,snynk security, owasp dependency check, pipeline:stage view.
tools - maven, sonarqube, snynk
system - sonarcloud api(url)

systemctl restart jenkins
        sudo -i
        wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
        rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
        yum upgrade     # Add required dependencies for the jenkins package                  
        yum install -y java-17-amazon-corretto
        yum install jenkins -y
        systemctl start jenkins
        systemctl enable jenkins
        systemctl status jenkins

yum install git -y
./1.sh jenkins

---------------------------------------------------------------------------------------------------

#!/bin/bash

pkgName=${1}
userId=$(id -u)

if [[ $# -ne 1 ]]; then
    echo "Please pass input as some package name."
    exit 1
fi

if [[ ${userId} -ne 0 ]]; then
    echo "You are not the root user. Please run this script as root."
    exit 2
fi

if command -v ${pkgName} >/dev/null 2>&1; then
    echo "Your package ${pkgName} is already deployed."
else
    if [[ "${pkgName}" == "jenkins" ]]; then
        wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
        rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
        yum upgrade
        yum install -y java-17-amazon-corretto  # Install Java without prompt
        
        yum install -y ${pkgName} >/dev/null 2>&1
        yumExitSt=$?
        if [[ ${yumExitSt} -eq 0 ]]; then
			sudo systemctl enable jenkins
			sudo systemctl start jenkins
            echo "${pkgName} Package is installed successfully and ${pkgName} service started ."
        else
            echo "Installation failed."
        fi
    else
        read -p "Required to install ${pkgName}. Do you want to proceed? (y/n): " confirm

        case $confirm in
            y|Y)
                yum install -y ${pkgName} >/dev/null 2>&1
                yumExitSt=$?
                if [[ ${yumExitSt} -eq 0 ]]; then
                    echo "${pkgName} Package is installed successfully."
                else
                    echo "Installation failed."
                fi
                ;;
            
            n|N)
                echo "Not installing."
                ;;
            
            *)
                echo "Invalid input. Please enter 'y' or 'n'."
                ;;
        esac
    fi
fi

                  



========================================================================================================

   70  yum remove jenkins
   71  wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
   72          rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
   73          yum upgrade     # Add required dependencies for the jenkins package
   74          yum install -y java-17-amazon-corretto
   75  systemctl status jenkins
   76  systemctl start jenkins
   77  sudo yum install jenkins
   78  systemctl start jenkins
   79  systemctl status jenkins


*****************************************************************************************************************************************
2.

systemctl edit jenkins --full
   Environment = "8080"

incase you forgot your password : /var/lib/jenkins->config.xml ->useSecurity(false)->systemctl restart jenkins

manage jenkins -> if you not found users option -> go to security -> find security realm -> select jenkins own user databases->
then apply and save.

manage jenkins -> user ->ramasamy ->setting -> go directly password and confirm password and set -> apply and save.

*******************************************************************************************************************************

3.

sonarcloud
snyk
owasp DC(Dependency)

pipeline

pre-req

plugin: sonarqube scanner, quality gate, snynk security, owasp dependency check, pipeline:stage view.

conf : sonar-token and synk Api token, Tool config

we have add stages in the sast scanning and SCA Scanning, DC-SCA

----------------------------------------------------------------------------------------------
4.


 sonar cloud server sign in.

 create new organization. create manually ->suryateck-devops -> select free -> create organization.

 create new project . address-book -> next -> previous version ->create

 information - > project key (suryateck-devops_address-book), organization key(suryateck-devops)
                    sonar way -> you can change gateway

 generate token -> my account-> security -> create token(Jenkins)->copy token: caf40ec0d8a37afc800a1ece59e4f326bef93d79

 snyk - API
 snyk.io -> skip for now -> profile name -> account setting -> generate key : 9a427f89-6a4c-4be6-993f-1f5b3addc370

-------------------------------------------------------------------------------------------------------------------------
5.

 Manage jenkins -> credential -> global -> secret text -> id:sonar-creds -> create

 Manage jenkins -> credential -> global -> Snyk Api token - past token -> id : snyk-api-token ->create


----------------------------------------------------------------------------------------------------------------------------
6.

 Manage jenkins -> Tools ->  maven -> Maven_Home, Sonarqube scanne inastallation -> install automatically, name : SonarQubeScanner, version: 9.9.9(latest version)
                              snyk -> name: snyk-tool, version : latest
                              Dependency-Check -> Name:DC, install automatically(github) -> apply and save

---------------------------------------------------------------------------------------------------------
7.

system -> name: SonarQube_Server, server URL: https://sonarcloud.io, authentication token: give the creds.

sonar-cloud
----------------------------------------------------------------------------------------------------------
8.

sonarcloud -> project -> click on the project -> webhooks -> create

Name: sonarwebhook
URL: http://3.110.165.214:8080/sonarqube-webhook

----------------------------------------------------------------------------------------------------------------

pipeline

pipeline {
    agent any
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '30', numToKeepStr: '2')
    }

    tools {
        maven 'Maven_Home'
    }

    environment {
        SCANNER_HOME = tool 'scanner-tool'
    }

    stages {
        stage('Git-Checkout') {
            steps {
                checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/promo286/addressbook.git']])
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }

        stage('Sonar Scan') {
            steps {
                withSonarQubeEnv('SonarQube_Server') {
                    sh """
                    "${SCANNER_HOME}/bin/scanner-tool" \
                    -Dsonar.projectName=suryateck-project_address-book \
                    -Dsonar.projectKey=suryateck-project_address-book \
                    -Dsonar.organization=suryateck-project \
                    -Dsonar.java.binaries=target/classes
                    """
                }
            }
        }

        stage('Quality Gate Check') {
            steps {
                script {
                    def qualityGate = waitForQualityGate()

                    if (qualityGate.status == 'OK') {
                        echo 'Quality gate passed! Proceeding with the pipeline.'
                    } else {
                        error "Quality gate failed: ${qualityGate.status}. Stopping the pipeline."
                    }
                }
            }
        }

        stage('Snyk Scan') {
            steps {
                snykSecurity(
                    snykInstallation: 'snyk_tool',
                    snykTokenId: 'snyk-api',
                    failOnError: false,
                    failOnIssues: false,
                    monitorProjectOnBuild: true
                )
            }
        }

        stage('OWASP Dependency Check') {
            steps {
                dependencyCheck additionalArguments: '--scan ./', 
                               odcInstallation: 'DC'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage('Build') {
            steps {
                sh 'mvn package'
            }
        }

    }
}


----------------------------------------------------

environment {
        // Define SonarQube environment variables
        SONAR_SCANNER_HOME = tool 'SonarQubeScanner' // Name of the SonarQube scanner tool in Jenkins Global Tool Configuration
        SONARQUBE_SERVER = 'SonarQube_Server'        // Name of SonarQube instance in Jenkins (defined in 'Manage Jenkins' -> 'Configure System')
    }

stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube_Server') {  // SonarQube instance defined in Jenkins - System Config
                    // Run SonarQube Scanner using the tool defined in Jenkins Global - Tool Config
                    sh "${SONAR_SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.projectName=suryateck-project_address-book \
                        -Dsonar.projectKey=suryateck-project_address-book \
                        -Dsonar.organization=suryateck-project \
                        -Dsonar.java.binaries=target/classes"
                }
            }
        }


----------------------------------------------------------------------------------------------------------------




complete code :-


pipeline {
    agent any
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '30', numToKeepStr: '2')
    }

    tools {
        maven 'Maven_Home'
    }

    environment {
        SCANNER_HOME = tool 'SonarQubeScanner'
    }

    stages {
        stage('Git-Checkout') {
            steps {
                checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/promo286/addressbook.git']])
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }

        stage('Sonar Scan') {
            steps {
                withSonarQubeEnv('SonarQube_Server') {
                    sh """
                    "${SCANNER_HOME}/bin/sonar-scanner" \
                    -Dsonar.projectName=suryateck-devops_address-book \
                    -Dsonar.projectKey=suryateck-devops_address-book \
                    -Dsonar.organization=suryateck-devops \
                    -Dsonar.java.binaries=target/classes
                    """
                }
            }
        }

        stage('Quality Gate Check') {
            steps {
                script {
                    def qualityGate = waitForQualityGate()

                    if (qualityGate.status == 'OK') {
                        echo 'Quality gate passed! Proceeding with the pipeline.'
                    } else {
                        error "Quality gate failed: ${qualityGate.status}. Stopping the pipeline."
                    }
                }
            }
        }

        stage('Snyk Scan') {
            steps {
                snykSecurity(
                    snykInstallation: 'snyk-tool',
                    snykTokenId: 'snyk-api-token',
                    failOnError: false,
                    failOnIssues: false,
                    monitorProjectOnBuild: true
                )
            }
        }

        stage('OWASP Dependency Check') {
            steps {
                dependencyCheck additionalArguments: '--scan ./', 
                               odcInstallation: 'DC'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage('Build') {
            steps {
                sh 'mvn package'
            }
        }

    }
}



-----------------------------------------------------------------------------------------------------------


pipeline {
  agent any

  stages {
    stage('Build') {
      steps {
        echo 'Building...'
      }
    }
    stage('Test') {
      steps {
        echo 'Testing...'
        snykSecurity(
          snykInstallation: 'MySnykInstallation',  // Replace with your Snyk installation name
          snykTokenId: 'snyk-api-token',  // Replace with your Snyk token (from Jenkins credentials)
          monitorProjectOnBuild: true,    // Example additional parameter to monitor the project
          organization: 'my-org',         // Replace with your Snyk organization, if needed
          projectName: 'my-project'       // Replace with your project name
        )
      }
    }
    stage('Deploy') {
      steps {
        echo 'Deploying...'
      }
    }
  }
}

