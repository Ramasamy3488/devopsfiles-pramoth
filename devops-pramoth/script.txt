<<<<<<< HEAD
Script


echo $?    --- 0 for last command success

VAR_NAME=Ramasamy
readonly VAR_NAME=Ramasamy

0 - Success
1 - Catchall for general errors.
2 - Misuse of shell builtins (according to Bash documentation)
126 - Command invoked cannot execute.
127 - “command not found”
128 - Invalid argument to exit.
128+n - Fatal error signal “n”
130 - Script terminated by Control-C.
255\* - Exit status out of range.

File operation
String operation
Math operation


String Operation:

string.sh

#!/bin/bash

# Declare two strings
string1="Hello"
string2="World"

# 1. String Concatenation
concatenated="$string1 $string2"
echo "Concatenated String: $concatenated"

# 2. Substring Extraction
substring=${string1:1:3}  # Extracts 3 characters starting from index 1
echo "Substring of '$string1': $substring"

# 3. String Length
length=${#string1}
echo "Length of '$string1': $length"

# 4. String Comparison
if [ "$string1" == "$string2" ]; then
    echo "'$string1' is equal to '$string2'"
else
    echo "'$string1' is not equal to '$string2'"
fi

# 5. Changing Case
upper_string=${string1^^}  # Convert to uppercase
lower_string=${string2,,}  # Convert to lowercase
echo "Uppercase of '$string1': $upper_string"
echo "Lowercase of '$string2': $lower_string"

# 6. Replace a substring
replaced_string=${string1/llo/yy}  # Replace 'llo' with 'yy'
echo "String after replacement: $replaced_string"

# 7. Checking if a string is empty
if [ -z "$string1" ]; then
    echo "'$string1' is empty"
else
    echo "'$string1' is not empty"
fi

*********************************************************************************

# Arithmetic Operations
echo "Arithmetic Operations:"

a=10
b=5

sum=$((a + b))
echo "Sum: $sum"

difference=$((a - b))
echo "Difference: $difference"

product=$((a * b))
echo "Product: $product"

quotient=$((a / b))
echo "Quotient: $quotient"

remainder=$((a % b))
echo "Remainder: $remainder"

((a++))  # Post-increment
echo "Incremented value of a: $a"

((a--))  # Post-decrement
echo "Decremented value of a: $a"

readonly abc=10 

def = abc+15 

abc= abc+15 

*****************************************************************************

#!/bin/bash
# A simple for loop example

for item in "apple" "banana" "cherry"
do
    echo "Fruit: $item"
done
---------------------------- 

#!/bin/bash
# A simple while loop example

count=5
while [ $count -gt 0 ]
do
    echo "Countdown: $count"
    ((count--))
done
echo "Liftoff!"


-------------------------------------------------------

#!/bin/bash
# A case statement to match a variable

read -p "Enter a number between 1 and 3: " number

case $number in
    1)
        echo "You entered One"
        ;;
    2)
        echo "You entered Two"
        ;;
    3)
        echo "You entered Three"
        ;;
    *)
        echo "Invalid number! Please enter between 1 and 3."
        ;;
esac


-----------------------------------------------------------------------------------------

#!/bin/bash
# A function to add two numbers


add_numbers() {
    local num1=$1
    local num2=$2
    local sum=$((num1 + num2))
    echo "The sum is: $sum"
}

# Call the function
add_numbers 5 10
echo "The sum is: $sum"

-----------------------------------------------------------------------------

#!/bin/bash
# A function to check if a file exists

check_file() {
    local file_name=$1
    if [ -e "$file_name" ]; then
        echo "File $file_name exists."
    else
        echo "File $file_name does not exist."
    fi
}

# Call the function
check_file "test.txt" 


------------------------------------
#!/bin/bash
# A function to check if a user exists on the system

user_exists() {
    local username=$1
    if id "$username" &>/dev/null; then
        echo "User $username exists."
    else
        echo "User $username does not exist."
    fi
}

# Call the function
user_exists "root" 
user_exists "nonexistent_user"
user_exists "ec2-user"
----------------------------------------------------------------------

#!/bin/bash
# A function to print a multiplication table for a given number

multiplication_table() {
    local num=$1
    for i in {1..10}
    do
        echo "$num x $i = $((num * i))"
    done
}

# Call the function
multiplication_table 5
--------------------------------------------------------------------------------

#!/bin/bash
# A function to print all elements of an array

print_array() {
    local arr=("$@")
    echo "Array elements are:"
    for element in "${arr[@]}"; do
        echo "$element"
    done
}

# Call the function
my_array=("apple" "banana" "cherry")
----------------------------------------------------
Function with Arrays: Printing Array Elements 

#!/bin/bash
# A function to print all elements of an array

print_array() {
    local arr=("$@")
    echo "Array elements are:"
    for element in "${arr[@]}"; do
        echo "$element"
    done
}

# Call the function
my_array=("apple" "banana" "cherry")
print_array "${my_array[@]}"
------------------------------------------------------------------- 


=======
Script


echo $?    --- 0 for last command success

VAR_NAME=Ramasamy
readonly VAR_NAME=Ramasamy

0 - Success
1 - Catchall for general errors.
2 - Misuse of shell builtins (according to Bash documentation)
126 - Command invoked cannot execute.
127 - “command not found”
128 - Invalid argument to exit.
128+n - Fatal error signal “n”
130 - Script terminated by Control-C.
255\* - Exit status out of range.

File operation
String operation
Math operation


String Operation:

string.sh

#!/bin/bash

# Declare two strings
string1="Hello"
string2="World"

# 1. String Concatenation
concatenated="$string1 $string2"
echo "Concatenated String: $concatenated"

# 2. Substring Extraction
substring=${string1:1:3}  # Extracts 3 characters starting from index 1
echo "Substring of '$string1': $substring"

# 3. String Length
length=${#string1}
echo "Length of '$string1': $length"

# 4. String Comparison
if [ "$string1" == "$string2" ]; then
    echo "'$string1' is equal to '$string2'"
else
    echo "'$string1' is not equal to '$string2'"
fi

# 5. Changing Case
upper_string=${string1^^}  # Convert to uppercase
lower_string=${string2,,}  # Convert to lowercase
echo "Uppercase of '$string1': $upper_string"
echo "Lowercase of '$string2': $lower_string"

# 6. Replace a substring
replaced_string=${string1/llo/yy}  # Replace 'llo' with 'yy'
echo "String after replacement: $replaced_string"

# 7. Checking if a string is empty
if [ -z "$string1" ]; then
    echo "'$string1' is empty"
else
    echo "'$string1' is not empty"
fi

*********************************************************************************

# Arithmetic Operations
echo "Arithmetic Operations:"

a=10
b=5

sum=$((a + b))
echo "Sum: $sum"

difference=$((a - b))
echo "Difference: $difference"

product=$((a * b))
echo "Product: $product"

quotient=$((a / b))
echo "Quotient: $quotient"

remainder=$((a % b))
echo "Remainder: $remainder"

((a++))  # Post-increment
echo "Incremented value of a: $a"

((a--))  # Post-decrement
echo "Decremented value of a: $a"

readonly abc=10 

def = abc+15 

abc= abc+15 

*****************************************************************************

#!/bin/bash
# A simple for loop example

for item in "apple" "banana" "cherry"
do
    echo "Fruit: $item"
done
---------------------------- 

#!/bin/bash
# A simple while loop example

count=5
while [ $count -gt 0 ]
do
    echo "Countdown: $count"
    ((count--))
done
echo "Liftoff!"


-------------------------------------------------------

#!/bin/bash
# A case statement to match a variable

read -p "Enter a number between 1 and 3: " number

case $number in
    1)
        echo "You entered One"
        ;;
    2)
        echo "You entered Two"
        ;;
    3)
        echo "You entered Three"
        ;;
    *)
        echo "Invalid number! Please enter between 1 and 3."
        ;;
esac


-----------------------------------------------------------------------------------------

#!/bin/bash
# A function to add two numbers


add_numbers() {
    local num1=$1
    local num2=$2
    local sum=$((num1 + num2))
    echo "The sum is: $sum"
}

# Call the function
add_numbers 5 10
echo "The sum is: $sum"

-----------------------------------------------------------------------------

#!/bin/bash
# A function to check if a file exists

check_file() {
    local file_name=$1
    if [ -e "$file_name" ]; then
        echo "File $file_name exists."
    else
        echo "File $file_name does not exist."
    fi
}

# Call the function
check_file "test.txt" 


------------------------------------
#!/bin/bash
# A function to check if a user exists on the system

user_exists() {
    local username=$1
    if id "$username" &>/dev/null; then
        echo "User $username exists."
    else
        echo "User $username does not exist."
    fi
}

# Call the function
user_exists "root" 
user_exists "nonexistent_user"
user_exists "ec2-user"
----------------------------------------------------------------------

#!/bin/bash
# A function to print a multiplication table for a given number

multiplication_table() {
    local num=$1
    for i in {1..10}
    do
        echo "$num x $i = $((num * i))"
    done
}

# Call the function
multiplication_table 5
--------------------------------------------------------------------------------

#!/bin/bash
# A function to print all elements of an array

print_array() {
    local arr=("$@")
    echo "Array elements are:"
    for element in "${arr[@]}"; do
        echo "$element"
    done
}

# Call the function
my_array=("apple" "banana" "cherry")
----------------------------------------------------
Function with Arrays: Printing Array Elements 

#!/bin/bash
# A function to print all elements of an array

print_array() {
    local arr=("$@")
    echo "Array elements are:"
    for element in "${arr[@]}"; do
        echo "$element"
    done
}

# Call the function
my_array=("apple" "banana" "cherry")
print_array "${my_array[@]}"
------------------------------------------------------------------- 


>>>>>>> cf6c94c51b3ab4ca7c7a8741c02d25ad767c4d58
