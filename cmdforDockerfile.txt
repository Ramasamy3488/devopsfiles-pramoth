# Use the official Tomcat image as the base image
FROM tomcat:9.0

# Copy your web application (WAR file) to the Tomcat webapps directory
COPY ./your-application.war /usr/local/tomcat/webapps/

# Expose the default Tomcat port
EXPOSE 8080

# Command to run the Tomcat server
CMD ["catalina.sh", "run"]


--------------------------------------------------


# Use the official NGINX image as the base image
FROM nginx:latest

# Copy your NGINX configuration file (if you have one)
# COPY ./your-nginx.conf /etc/nginx/nginx.conf

# Copy your website content to the appropriate directory
COPY ./your-website/ /usr/share/nginx/html/

# Expose the default HTTP port
EXPOSE 80

# Command to run NGINX in the foreground
CMD ["nginx", "-g", "daemon off;"]

--------------------------------------------------------------

# Use the official Apache HTTP Server image
FROM httpd:2.4

# Copy your custom configuration file (if you have one)
# COPY ./your-httpd.conf /usr/local/apache2/conf/httpd.conf

# Copy your website content to the appropriate directory
COPY ./your-website/ /usr/local/apache2/htdocs/

# Expose the default HTTP port
EXPOSE 80

# Command to run the Apache HTTP Server in the foreground
CMD ["httpd-foreground"]


----------------------------------------------------------------------

# Use the official Node.js image as the base image
FROM node:18

# Set the working directory in the container
WORKDIR /usr/src/app

# Copy package.json and package-lock.json files to the working directory
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of your application code to the working directory
COPY . .

# Expose the application port (e.g., 3000)
EXPOSE 3000

# Command to run the Node.js application
CMD ["node", "app.js"]


-----------------------------------------------------------------

Example Dockerfile for NGINX on Alpine

# Use the official Alpine image as the base image
FROM alpine:latest

# Install NGINX
RUN apk add --no-cache nginx

# Copy your website content to the appropriate directory
COPY ./your-website/ /usr/share/nginx/html/

# Expose the default HTTP port
EXPOSE 80

# Command to run NGINX in the foreground
CMD ["nginx", "-g", "daemon off;"]


----------------------------------------------------------------------------------

Example Dockerfile for a Node.js Application on Alpine

# Use the official Node.js image based on Alpine
FROM node:18-alpine

# Set the working directory in the container
WORKDIR /usr/src/app

# Copy package.json and package-lock.json files to the working directory
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of your application code to the working directory
COPY . .

# Expose the application port (e.g., 3000)
EXPOSE 3000

# Command to run the Node.js application
CMD ["node", "app.js"]


------------------------------------------------------------------

# Use the official BusyBox image
FROM busybox:latest

# Set the working directory
WORKDIR /app

# Copy your script or other files (optional)
COPY ./your-script.sh /app/

# Expose a port (optional, if you're running a service)
# EXPOSE 8080

# Command to run on container start
CMD ["sh", "/app/your-script.sh"]

------------------------------------------------------------
# Use the official BusyBox image as the base
FROM busybox:latest

# Set the working directory
WORKDIR /app

# Install NGINX by downloading and extracting it
# BusyBox is minimal, so we need to get NGINX manually.
ADD https://nginx.org/download/nginx-1.21.6.tar.gz /app

# Extract the NGINX tar file
RUN tar -zxvf nginx-1.21.6.tar.gz && \
    rm nginx-1.21.6.tar.gz

# Set up NGINX config files (you may copy your own custom config here)
COPY ./nginx.conf /app/nginx-1.21.6/conf/nginx.conf

# Expose the default HTTP port
EXPOSE 80

# Command to run NGINX
CMD ["/app/nginx-1.21.6/objs/nginx", "-g", "daemon off;"]

--------------------------------------------------

NGINX Configuration (nginx.conf)
A simple nginx.conf file you might use:


worker_processes 1;
events {
    worker_connections 1024;
}
http {
    server {
        listen 80;
        location / {
            root /app;
            index index.html;
        }
    }
}

---------------------------------------------------------------------------------------------